name: Deploy JavaScript MT5 WebSocket Client to Google Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual triggering

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: mt5-websocket-client-js
  REGION: us-central1
  MT5_SERVER_URL: ws://34.87.87.53:8765
  FOREX_SYMBOLS: XAUUSD,EURUSD,GBPUSD,USDTHB
  STORAGE_TYPE: bigquery
  BQ_DATASET_ID: mt5_data
  BQ_TABLE_ID: tabletabletable_js

jobs:
  setup-build-deploy:
    name: Setup, Build, and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
        token_format: 'access_token'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'
      
    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

    # Build and push using Cloud Build
    - name: Build and Push with Cloud Build
      run: |
        gcloud builds submit --tag ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }} ./mt5-websocket-client-js

    - name: Deploy to Cloud Run
      id: deploy
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --set-env-vars="MT5_SERVER_URL=${{ env.MT5_SERVER_URL }},FOREX_SYMBOLS=${{ env.FOREX_SYMBOLS }},STORAGE_TYPE=${{ env.STORAGE_TYPE }},BQ_DATASET_ID=${{ env.BQ_DATASET_ID }},BQ_TABLE_ID=${{ env.BQ_TABLE_ID }}" \
          --cpu=1 \
          --memory=512Mi \
          --timeout=3600s \
          --min-instances=1 \
          --concurrency=1

    - name: Create BigQuery Dataset if needed
      run: |
        # Check if dataset exists, create if it doesn't
        if ! gcloud bigquery datasets describe ${{ env.BQ_DATASET_ID }} --project=${{ env.PROJECT_ID }} &> /dev/null; then
          echo "Creating BigQuery dataset: ${{ env.BQ_DATASET_ID }}"
          gcloud bigquery datasets create ${{ env.BQ_DATASET_ID }} --project=${{ env.PROJECT_ID }} --location=US
        else
          echo "BigQuery dataset ${{ env.BQ_DATASET_ID }} already exists"
        fi

    - name: Set BigQuery Permissions
      run: |
        # Get the service account email from the deployed Cloud Run service
        SERVICE_ACCOUNT=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region ${{ env.REGION }} \
          --format="value(serviceAccountEmail)")
          
        echo "Setting BigQuery permissions for service account: $SERVICE_ACCOUNT"
        
        # Grant BigQuery Data Editor role to the service account
        gcloud projects add-iam-policy-binding ${{ env.PROJECT_ID }} \
          --member="serviceAccount:$SERVICE_ACCOUNT" \
          --role="roles/bigquery.dataEditor"
        
        # Grant BigQuery Job User role to allow creating tables
        gcloud projects add-iam-policy-binding ${{ env.PROJECT_ID }} \
          --member="serviceAccount:$SERVICE_ACCOUNT" \
          --role="roles/bigquery.jobUser"

    - name: Create Cloud Scheduler job for keeping service alive
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region ${{ env.REGION }} \
          --format="value(status.url)")
        
        # Get the service account
        SERVICE_ACCOUNT=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region ${{ env.REGION }} \
          --format="value(serviceAccountEmail)")
        
        # Create or update Cloud Scheduler job
        if gcloud scheduler jobs describe keep-${{ env.SERVICE_NAME }}-alive \
           --location ${{ env.REGION }} &> /dev/null; then
          
          gcloud scheduler jobs update http keep-${{ env.SERVICE_NAME }}-alive \
            --location ${{ env.REGION }} \
            --schedule="*/15 * * * *" \
            --uri="${SERVICE_URL}/health" \
            --http-method=GET \
            --oidc-service-account-email="${SERVICE_ACCOUNT}"
        else
          gcloud scheduler jobs create http keep-${{ env.SERVICE_NAME }}-alive \
            --location ${{ env.REGION }} \
            --schedule="*/15 * * * *" \
            --uri="${SERVICE_URL}/health" \
            --http-method=GET \
            --oidc-service-account-email="${SERVICE_ACCOUNT}"
        fi
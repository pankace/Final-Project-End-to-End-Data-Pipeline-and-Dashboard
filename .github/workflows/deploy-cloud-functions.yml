name: Deploy MT5 Cloud Functions

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'terraform/**'
      - '.github/workflows/deploy-cloud-functions.yml'
  workflow_dispatch:  # Allows manual triggering

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_SA_EMAIL }}
  TERRAFORM_STATE_BUCKET: ${{ secrets.TERRAFORM_STATE_BUCKET }}

jobs:
  deploy:
    name: Deploy Cloud Functions
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install google-cloud-bigquery google-cloud-pubsub functions-framework

    - name: Authenticate to Google Cloud
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'
      # Removed the incorrect component installation

    - name: Prepare function deployment directories
      run: |
        # Create directories for function deployment
        mkdir -p function_deploy/http_function/src function_deploy/pubsub_function/src
        
        # HTTP Function
        cp src/cloud_functions/http_function.py function_deploy/http_function/main.py
        echo "google-cloud-bigquery>=3.3.5" > function_deploy/http_function/requirements.txt
        echo "functions-framework>=3.0.0" >> function_deploy/http_function/requirements.txt
        
        # Pub/Sub Function
        cp src/cloud_functions/pubsub_function.py function_deploy/pubsub_function/main.py
        echo "google-cloud-bigquery>=3.3.5" > function_deploy/pubsub_function/requirements.txt
        echo "functions-framework>=3.0.0" >> function_deploy/pubsub_function/requirements.txt
        
        # Copy shared code
        mkdir -p function_deploy/http_function/src/connectors function_deploy/http_function/src/processors function_deploy/http_function/src/config
        mkdir -p function_deploy/pubsub_function/src/connectors function_deploy/pubsub_function/src/processors function_deploy/pubsub_function/src/config
        
        # Copy connectors
        cp -r src/connectors/* function_deploy/http_function/src/connectors/
        cp -r src/connectors/* function_deploy/pubsub_function/src/connectors/
        
        # Copy processors
        cp -r src/processors/* function_deploy/http_function/src/processors/
        cp -r src/processors/* function_deploy/pubsub_function/src/processors/
        
        # Copy config
        cp -r src/config/* function_deploy/http_function/src/config/
        cp -r src/config/* function_deploy/pubsub_function/src/config/
        
        # Create __init__.py files
        touch function_deploy/http_function/src/__init__.py
        touch function_deploy/http_function/src/connectors/__init__.py
        touch function_deploy/http_function/src/processors/__init__.py
        touch function_deploy/http_function/src/config/__init__.py
        
        touch function_deploy/pubsub_function/src/__init__.py
        touch function_deploy/pubsub_function/src/connectors/__init__.py
        touch function_deploy/pubsub_function/src/processors/__init__.py
        touch function_deploy/pubsub_function/src/config/__init__.py
        
        # Update settings.py with environment variables
        sed -i "s/BQ_PROJECT_ID = \"your-project-id\"/BQ_PROJECT_ID = os.environ.get(\"PROJECT_ID\", \"${{ env.PROJECT_ID }}\")/" function_deploy/http_function/src/config/settings.py
        sed -i "s/BQ_PROJECT_ID = \"your-project-id\"/BQ_PROJECT_ID = os.environ.get(\"PROJECT_ID\", \"${{ env.PROJECT_ID }}\")/" function_deploy/pubsub_function/src/config/settings.py

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.0
        terraform_wrapper: false

    - name: Import existing resources and handle failures
      working-directory: terraform
      run: |
        # Set defaults - assume resources don't exist
        echo 'BQ_DATASET_EXISTS=false' >> $GITHUB_ENV
        echo 'BUCKET_EXISTS=false' >> $GITHUB_ENV
        echo 'TOPIC_EXISTS=false' >> $GITHUB_ENV
        
        # Try to import BigQuery dataset
        terraform import google_bigquery_dataset.mt5_trading[0] ${{ env.PROJECT_ID }}:mt5_trading && \
          echo 'BQ_DATASET_EXISTS=true' >> $GITHUB_ENV || echo "Failed to import BigQuery dataset"
        
        # Try to import storage bucket
        terraform import google_storage_bucket.function_bucket[0] ${{ env.PROJECT_ID }}-function-bucket && \
          echo 'BUCKET_EXISTS=true' >> $GITHUB_ENV || echo "Failed to import storage bucket"
        
        # Try to import Pub/Sub topic
        terraform import google_pubsub_topic.mt5_topic[0] projects/${{ env.PROJECT_ID }}/topics/mt5-trading-topic && \
          echo 'TOPIC_EXISTS=true' >> $GITHUB_ENV || echo "Failed to import Pub/Sub topic"
          
    # Create terraform.tfvars based on what exists
    - name: Create terraform.tfvars
      working-directory: terraform
      run: |
        cat > terraform.tfvars << EOF
        project_id = "${{ env.PROJECT_ID }}"
        region = "${{ env.REGION }}"
        service_account_email = "${{ env.SERVICE_ACCOUNT }}"
        create_bigquery_dataset = ${{ env.BQ_DATASET_EXISTS == 'false' }}
        create_storage_bucket = ${{ env.BUCKET_EXISTS == 'false' }}
        create_pubsub_topic = ${{ env.TOPIC_EXISTS == 'false' }}
        EOF
        
        cat terraform.tfvars

    - name: Terraform Init
      working-directory: terraform
      run: |
        terraform init \
          -backend-config="bucket=${{ env.TERRAFORM_STATE_BUCKET }}" \
          -backend-config="prefix=terraform/state"

    - name: Terraform Validate
      working-directory: terraform
      run: terraform validate

    # Conditionally create terraform.tfvars file based on what exists
    - name: Create terraform.tfvars
      working-directory: terraform
      run: |
        cat > terraform.tfvars << EOF
        project_id = "${{ env.PROJECT_ID }}"
        region = "${{ env.REGION }}"
        service_account_email = "${{ env.SERVICE_ACCOUNT_EMAIL }}"
        create_bigquery_dataset = ${{ env.BQ_DATASET_EXISTS == 'false' }}
        create_storage_bucket = ${{ env.BUCKET_EXISTS == 'false' }}
        create_pubsub_topic = ${{ env.TOPIC_EXISTS == 'false' }}
        EOF
        
        cat terraform.tfvars

    - name: Terraform Plan
      working-directory: terraform
      run: terraform plan -var-file=terraform.tfvars
      
    - name: Terraform Apply
      working-directory: terraform
      run: terraform apply -auto-approve -var-file=terraform.tfvars

    - name: Output deployed function details
      working-directory: terraform
      run: |
        echo "HTTP Function URL: $(terraform output -raw cloud_function_http_url || echo 'Output not available')"
        echo "Pub/Sub Function Name: $(terraform output -raw cloud_function_pubsub_name || echo 'Output not available')"